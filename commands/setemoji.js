const { SlashCommandBuilder } = require('discord.js');
const { loadEmojis, saveEmojis } = require('../utils/database');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('setemoji')
    .setDescription('üîß Ch·ªâ Owner d√πng ƒë·ªÉ ƒë·ªïi emoji m·∫∑c ƒë·ªãnh')
    .addStringOption(option =>
      option.setName('emoji')
        .setDescription('Emoji m·ªõi')
        .setRequired(true)
    ),

  async execute(interaction) {
    try {
      const ownerId = process.env.OWNER_ID;
      if (interaction.user.id !== ownerId) {
        return interaction.editReply({
          content: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.'
        });
      }

      const newEmoji = interaction.options.getString('emoji');
      // Validate emoji format (unicode ho·∫∑c custom)
      const emojiRegex = /^[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]$/u;
      if (!emojiRegex.test(newEmoji)) {
        return interaction.editReply({
          content: '‚ùå Emoji kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng emoji Unicode.'
        });
      }
      try {
        // L∆∞u v√†o MongoDB
        await saveEmojis([{ key: 'default', emoji: newEmoji }]);
        await interaction.editReply({
          content: `‚úÖ ƒê√£ thay ƒë·ªïi emoji m·∫∑c ƒë·ªãnh th√†nh: ${newEmoji}`
        });
      } catch (error) {
        await interaction.editReply({
          content: '‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u emoji.'
        });
      }
    } catch (error) {
      console.error('L·ªói trong setemoji:', error);
      try {
        await interaction.editReply({
          content: '‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh.'
        });
      } catch (replyError) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói:', replyError);
      }
    }
  }
};

