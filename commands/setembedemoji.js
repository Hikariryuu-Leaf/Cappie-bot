const { SlashCommandBuilder } = require('discord.js');
const embedConfig = require('../config/embeds');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('setembedemoji')
    .setDescription('üîß Ch·ªâ Owner d√πng ƒë·ªÉ ƒë·ªïi emoji cho c√°c ph·∫ßn kh√°c nhau c·ªßa embed')
    .addStringOption(option =>
      option.setName('section')
        .setDescription('Ph·∫ßn emoji mu·ªën thay ƒë·ªïi')
        .setRequired(true)
        .addChoices(
          { name: 'Diemdanh - Success', value: 'diemdanh.success' },
          { name: 'Diemdanh - Reward', value: 'diemdanh.reward' },
          { name: 'Diemdanh - Nitro', value: 'diemdanh.nitro' },
          { name: 'Diemdanh - Total', value: 'diemdanh.total' },
          { name: 'Diemdanh - Cooldown', value: 'diemdanh.cooldown' },
          { name: 'Profile - Cartridge', value: 'profile.cartridge' },
          { name: 'Profile - Voice', value: 'profile.voice' },
          { name: 'Profile - Rank', value: 'profile.rank' },
          { name: 'Profile - Voice Rank', value: 'profile.voiceRank' },
          { name: 'Top - Cartridge', value: 'top.cartridge' },
          { name: 'Top - Voice', value: 'top.voice' },
          { name: 'Top - Rank', value: 'top.rank' },
          { name: 'Shop - Title', value: 'shop.title' },
          { name: 'Shop - Price', value: 'shop.price' },
          { name: 'Shop - Buy', value: 'shop.buy' }
        )
    )
    .addStringOption(option =>
      option.setName('emoji')
        .setDescription('Emoji m·ªõi')
        .setRequired(true)
    ),

  async execute(interaction) {
    try {
      
      
      const ownerId = process.env.OWNER_ID;
      if (interaction.user.id !== ownerId) {
        return interaction.editReply({
          content: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.'
        });
      }

      const section = interaction.options.getString('section');
      const emoji = interaction.options.getString('emoji');

      // Update the specific emoji in the config
      const [category, subcategory] = section.split('.');
      if (embedConfig.emojis[category] && embedConfig.emojis[category][subcategory]) {
        embedConfig.emojis[category][subcategory] = emoji;
        
        await safeEditReply(interaction({
          content: `‚úÖ ƒê√£ thay ƒë·ªïi emoji cho ${section} th√†nh: ${emoji}`
        });
      } else {
        await safeEditReply(interaction({
          content: '‚ùå Ph·∫ßn emoji kh√¥ng t·ªìn t·∫°i.'
        });
      }
    } catch (error) {
      console.error('L·ªói trong setembedemoji:', error);
      try {
        await safeEditReply(interaction({
          content: '‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh.'
        });
      } catch (replyError) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói:', replyError);
      }
    }
  }
}; 