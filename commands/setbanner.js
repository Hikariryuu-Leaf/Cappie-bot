const { SlashCommandBuilder } = require('discord.js');
const embedConfig = require('../config/embeds');


module.exports = {
  data: new SlashCommandBuilder()
    .setName('setbanner')
    .setDescription('üîß Ch·ªâ Owner d√πng ƒë·ªÉ ƒë·∫∑t banner cho user')
    .addUserOption(option =>
      option.setName('user')
        .setDescription('User mu·ªën ƒë·∫∑t banner')
        .setRequired(true)
    )
    .addStringOption(option =>
      option.setName('banner_url')
        .setDescription('URL c·ªßa banner')
        .setRequired(true)
    ),

  async execute(interaction) {
    try {
      
      
      const ownerId = process.env.OWNER_ID;
      if (interaction.user.id !== ownerId) {
        return interaction.editReply({
          content: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.'
        });
      }

      const user = interaction.options.getUser('user');
      const bannerUrl = interaction.options.getString('banner_url');

      // Validate URL format
      try {
        new URL(bannerUrl);
      } catch (error) {
        return interaction.editReply({
          content: '‚ùå URL kh√¥ng h·ª£p l·ªá.'
        });
      }

      // Set the banner for the user
      embedConfig.userBanners[user.id] = bannerUrl;
      
      await safeEditReply(interaction({
        content: `‚úÖ ƒê√£ ƒë·∫∑t banner cho ${user.username}: ${bannerUrl}`
      });
    } catch (error) {
      console.error('L·ªói trong setbanner:', error);
      try {
        await safeEditReply(interaction({
          content: '‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh.'
        });
      } catch (replyError) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói:', replyError);
      }
    }
  }
}; 