const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { loadAllUsers, saveUser } = require('../utils/database');
const { safeEditReply } = require('../utils/interactionHelper');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('persistent')
    .setDescription('Qu·∫£n l√Ω d·ªØ li·ªáu User (MongoDB)')
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
    .addSubcommand(subcommand =>
      subcommand
        .setName('backup')
        .setDescription('T·∫°o b·∫£n sao l∆∞u d·ªØ li·ªáu User (MongoDB)')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('list')
        .setDescription('Xem danh s√°ch t·∫•t c·∫£ user trong MongoDB')
    ),

  async execute(interaction) {
    try {
      const subcommand = interaction.options.getSubcommand();
      switch (subcommand) {
        case 'backup':
          await this.createBackup(interaction);
          break;
        case 'list':
          await this.listUsers(interaction);
          break;
      }
    } catch (error) {
      console.error('L·ªói trong execute persistent:', error);
      try {
        await safeEditReply(interaction, {
          content: `‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh persistent: ${error.message}`
        });
      } catch (replyError) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói:', replyError);
      }
    }
  },

  async createBackup(interaction) {
    try {
      const users = await loadAllUsers();
      const embed = new EmbedBuilder()
        .setTitle('‚úÖ ƒê√£ backup d·ªØ li·ªáu User (MongoDB)')
        .setDescription(`T·ªïng s·ªë user: **${users.length}**\nD·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ an to√†n tr√™n MongoDB!`)
        .setColor('#00ff88')
        .setTimestamp();
      await safeEditReply(interaction, { embeds: [embed] });
    } catch (error) {
      console.error('L·ªói t·∫°o backup:', error);
      try {
        const errorEmbed = new EmbedBuilder()
          .setTitle('‚ùå L·ªói T·∫°o Backup')
          .setDescription(`C√≥ l·ªói x·∫£y ra khi t·∫°o backup:\n\`${error.message}\``)
          .setColor('#ff4444')
          .setTimestamp();
        await safeEditReply(interaction, { embeds: [errorEmbed] });
      } catch (replyError) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói:', replyError);
      }
    }
  },

  async listUsers(interaction) {
    try {
      const users = await loadAllUsers();
      const embed = new EmbedBuilder()
        .setTitle('üìã Danh S√°ch User (MongoDB)')
        .setDescription(`T·ªïng s·ªë user: **${users.length}**`)
        .setColor('#0099ff')
        .setTimestamp();
      let count = 0;
      for (const user of users.slice(0, 20)) {
        embed.addFields({
          name: `UserID: ${user.userId}`,
          value: `Cartridge: ${user.cartridge || 0} | Voice: ${user.totalVoice || 0}`,
          inline: false
        });
        count++;
      }
      if (users.length > 20) {
        embed.addFields({
          name: '...',
          value: `V√† ${users.length - 20} user kh√°c...`,
          inline: false
        });
      }
      await safeEditReply(interaction, { embeds: [embed] });
    } catch (error) {
      console.error('L·ªói li·ªát k√™ user:', error);
      try {
        const errorEmbed = new EmbedBuilder()
          .setTitle('‚ùå L·ªói Li·ªát K√™ User')
          .setDescription(`C√≥ l·ªói x·∫£y ra khi li·ªát k√™ user:\n\`${error.message}\``)
          .setColor('#ff4444')
          .setTimestamp();
        await safeEditReply(interaction, { embeds: [errorEmbed] });
      } catch (replyError) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói:', replyError);
      }
    }
  }
}; 