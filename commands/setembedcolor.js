const { SlashCommandBuilder } = require('discord.js');
const embedConfig = require('../config/embeds');


module.exports = {
  data: new SlashCommandBuilder()
    .setName('setembedcolor')
    .setDescription('üîß Ch·ªâ Owner d√πng ƒë·ªÉ ƒë·ªïi m√†u cho c√°c ph·∫ßn kh√°c nhau c·ªßa embed')
    .addStringOption(option =>
      option.setName('section')
        .setDescription('Ph·∫ßn m√†u mu·ªën thay ƒë·ªïi')
        .setRequired(true)
        .addChoices(
          { name: 'Success', value: 'success' },
          { name: 'Error', value: 'error' },
          { name: 'Info', value: 'info' },
          { name: 'Warning', value: 'warning' },
          { name: 'Top', value: 'top' },
          { name: 'Voice', value: 'voice' },
          { name: 'Profile', value: 'profile' },
          { name: 'Shop', value: 'shop' }
        )
    )
    .addStringOption(option =>
      option.setName('color')
        .setDescription('M√†u m·ªõi (hex code, v√≠ d·ª•: #ff0000)')
        .setRequired(true)
    ),

  async execute(interaction) {
    try {
      // Defer the interaction immediately to prevent timeout
      if (!interaction.deferred && !interaction.replied) {
        await interaction.deferReply({ ephemeral: false });
      }
      
      const ownerId = process.env.OWNER_ID;
      if (interaction.user.id !== ownerId) {
        return interaction.editReply({
          content: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.'
        });
      }

      const section = interaction.options.getString('section');
      const color = interaction.options.getString('color');

      // Validate hex color format
      const hexColorRegex = /^#[0-9A-Fa-f]{6}$/;
      if (!hexColorRegex.test(color)) {
        return interaction.editReply({
          content: '‚ùå M√†u kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng hex (v√≠ d·ª•: #ff0000).'
        });
      }

      // Update the specific color in the config
      if (embedConfig.colors[section]) {
        embedConfig.colors[section] = color;
        
        await interaction.editReply({
          content: `‚úÖ ƒê√£ thay ƒë·ªïi m√†u cho ${section} th√†nh: ${color}`
        });
      } else {
        await interaction.editReply({
          content: '‚ùå Ph·∫ßn m√†u kh√¥ng t·ªìn t·∫°i.'
        });
      }
    } catch (error) {
      console.error('L·ªói trong setembedcolor:', error);
      try {
        await interaction.editReply({
          content: '‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh.'
        });
      } catch (replyError) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói:', replyError);
      }
    }
  }
};