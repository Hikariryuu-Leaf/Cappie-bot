const { SlashCommandBuilder } = require('discord.js');
const { loadJSON, saveJSON } = require('../utils/database');
const { userDataPath } = require('../config');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('resetvoicetime')
    .setDescription('üîß Ch·ªâ Owner d√πng ƒë·ªÉ reset voice time c·ªßa user')
    .addUserOption(option =>
      option.setName('user')
        .setDescription('User mu·ªën reset voice time')
        .setRequired(true)
    ),

  async execute(interaction) {
    try {
      // Defer the interaction immediately to prevent timeout
      if (!interaction.deferred && !interaction.replied) {
        await interaction.deferReply({ ephemeral: false });
      }
      
      const ownerId = process.env.OWNER_ID;
      if (interaction.user.id !== ownerId) {
        return interaction.editReply({
          content: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.'
        });
      }

      const targetUser = interaction.options.getUser('user');
      const users = loadJSON(userDataPath);

      if (!users[targetUser.id]) {
        return interaction.editReply({
          content: '‚ùå User n√†y ch∆∞a c√≥ d·ªØ li·ªáu voice time.'
        });
      }

      // Reset voice time
      users[targetUser.id].voiceTime = 0;
      users[targetUser.id].totalVoice = 0;
      saveJSON(userDataPath, users);

      await interaction.editReply({
        content: `‚úÖ ƒê√£ reset voice time cho ${targetUser.username}.`
      });
    } catch (error) {
      console.error('L·ªói trong resetvoicetime:', error);
      try {
        await interaction.editReply({
          content: '‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh.'
        });
      } catch (replyError) {
        console.error('Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói:', replyError);
      }
    }
  }
};