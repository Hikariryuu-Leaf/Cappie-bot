const { EmbedBuilder } = require('discord.js');
const { loadJSON, saveJSON } = require('../../utils/database');
const { userDataPath, emojiPath, shopDataPath } = require('../../config');
const config = require('../../config');
const embedConfig = require('../../config/embeds');
const { safeEditReply } = require('../../utils/interactionHelper');

module.exports = {
  customIdRegex: /^buyitem_\d+$/,

  async execute(interaction) {
    const match = interaction.customId.match(/^buyitem_(\d+)$/);
    if (!match) return;

    const itemIndex = parseInt(match[1]);
    const userId = interaction.user.id;
    const username = interaction.user.username;

    const users = loadJSON(userDataPath);
    const emojiData = loadJSON(emojiPath);
    const emoji = emojiData.emoji || config.defaultEmoji;
    const shop = loadJSON(shopDataPath);
    
    const shopItems = Object.entries(shop);
    const item = shopItems[itemIndex];

    if (!item) {
      return safeEditReply(interaction, { content: '‚ùå Ph·∫ßn th∆∞·ªüng kh√¥ng t·ªìn t·∫°i.' });
    }

    const [itemName, price] = item;
    const user = users[userId] || { cartridge: 0, totalVoice: 0 };
    
    if (user.cartridge < price) {
      return safeEditReply(interaction, {
        content: `‚ùå B·∫°n kh√¥ng ƒë·ªß ${emoji}. C·∫ßn ${price}, b·∫°n c√≥ ${user.cartridge}.`
      });
    }

    // Tr·ª´ Cartridge
    user.cartridge -= price;
    users[userId] = user;
    saveJSON(userDataPath, users);

    const embed = new EmbedBuilder()
      .setTitle(`${embedConfig.emojis.shop.title} ƒê·ªïi qu√†: ${itemName}`)
      .setColor(embedConfig.colors.success)
      .setThumbnail(interaction.user.displayAvatarURL({ size: 256, format: 'png' }))
      .setImage(embedConfig.getBanner(userId))
      .addFields(
        { name: 'Ng∆∞·ªùi ƒë·ªïi', value: `<@${userId}> (${userId})`, inline: true },
        { name: 'Ph·∫ßn th∆∞·ªüng', value: itemName, inline: true },
        { name: 'Gi√°', value: `${price} ${emoji}`, inline: true }
      )
      .setTimestamp();

    // Th·ª±c thi ph·∫ßn th∆∞·ªüng
    if (itemName.includes('Role ƒë·ªôc quy·ªÅn')) {
      try {
        const guild = interaction.guild;
        const member = await guild.members.fetch(userId);
        await member.roles.add(config.exclusiveRoleId);
        embed.addFields({ name: '‚úÖ Th·ª±c thi', value: 'ƒê√£ th√™m role ƒë·ªôc quy·ªÅn!', inline: false });
      } catch (error) {
        console.error('L·ªói khi th√™m role:', error);
        embed.addFields({ name: '‚ö†Ô∏è L·ªói', value: 'Kh√¥ng th·ªÉ th√™m role. Vui l√≤ng li√™n h·ªá admin.', inline: false });
      }
    } else {
      // G·ª≠i th√¥ng b√°o ƒë·∫øn Admin x·ª≠ l√Ω
      try {
        const ownerUser = await interaction.client.users.fetch(config.ownerId);
        await ownerUser.send(`üì• **[${itemName}]** - <@${userId}> (${username}) v·ª´a ƒë·ªïi ph·∫ßn th∆∞·ªüng n√†y.`);
        embed.addFields({ name: 'üìß Th√¥ng b√°o', value: 'ƒê√£ g·ª≠i th√¥ng b√°o cho admin!', inline: false });
      } catch (error) {
        console.error('L·ªói khi g·ª≠i th√¥ng b√°o:', error);
      }
    }

    // G·ª≠i log n·∫øu c√≥ channel log
    if (config.logChannelId) {
      try {
        const logChannel = await interaction.client.channels.fetch(config.logChannelId);
        await logChannel.send({ embeds: [embed] });
      } catch (error) {
        console.error('L·ªói khi g·ª≠i log:', error);
      }
    }

    await safeEditReply(interaction, {
      content: `‚úÖ B·∫°n ƒë√£ ƒë·ªïi th√†nh c√¥ng ph·∫ßn th∆∞·ªüng **${itemName}** v·ªõi gi√° **${price} ${emoji}**!`
    });
  }
};

